@page "/"
@inject NavigationManager nav
@{
    var widthpx = $"{_width}px";
}

<style>
    div.algorithm {
        display: inline-block;
        border-style:solid;
        border-width:1px;
        border-color:darkcyan;
        margin: 0px 1px 0px 1px;
        padding: 0px;
        position:relative;
    }

    div.name {
        display: block;
        font-size: large;
        font-weight: bold;
        text-align:center;
        width: @widthpx;
        position: absolute;
        z-index:1;
    }

    div.running {
        color: dodgerblue;
    }

    div.done {
        color: forestgreen;
    }

    div.bars {
        width: @widthpx;
        height: @widthpx;
        flex-wrap: nowrap;
        display: flex;
        align-items: flex-end;
    }

    span.bar {
        display: inline-block;
        width: 1px;
        background-color: lightgreen;
        margin: 0px;
        padding: 0px;
    }

    span.swap {
        background-color: red;
    }

    span.compare {
        background-color: green;
    }

    body {
        margin:0px;
        padding:0px;
    }

    div.header {
        position:relative;
    }

    div.info {
        margin:0px;
        padding:0px;
        display:inline-block;
        right:0px;
        position: absolute;
    }

    div.info p {
        margin:0.1em;
        padding:0em;
    }

    div.sequence {
        display:inline-block;
    }

    div.run {
        display:inline-block;
    }
</style>

<div class="header">
    @if (!_noSequence)
    {
        <div class="sequence">
            長さ <input type="number" @bind-value="@_generationSettings.Length" min="1" max="300" />
            重複度 <input type="number" @bind-value="@_generationSettings.Duplication" min="0" step="1" />
            ランダム度 <input type="number" @bind-value="@_generationSettings.Randomness" min="0" max="5" step="0.1" />
            降順 <input type="checkbox" @bind-value="@_generationSettings.IsDescending" />
        </div>
    }

    <div class="run">
        <button @onclick="@Shuffle">Shuffle</button>
        <button @onclick="@RunAsync">Run</button>
    </div>

    @if (!_noInfo)
    {
        <div class="info">
            <p>
                ソースコードはこちら: <a href="https://github.com/ufcpp/StaticWebApps/tree/main/BlazorWasm/SortVisualizer">SortVisualizer</a>
            </p>
        </div>
    }
</div>

@foreach (var state in _sortStates)
{
    var nc = state.Current.Kind == Sort.Kind.Done
        ? "name done"
        : "name running";

    <div class="algorithm" title="@state.Description">
        @if (!_noTitle)
        {
            <div class="@nc">@state.Name</div>
        }

        <div class="bars">
            @{
                var w = _width / state.Items.Length;
                var wpx = $"{w}px";
            }
            @for (int i = 0; i < state.Items.Length; i++)
            {
                var (kind, i1, i2) = state.Current;

                var c = "bar";
                if ((i == i1 || i == i2) && kind != Sort.Kind.Done)
                    c = kind == Sort.Kind.Compare ? "bar compare" : "bar swap";

                var h = (int)Math.Floor(w * state.Items[i]);
                var hpx = $"{h}px";

                <span class="@c" style="width: @wpx; height:@hpx;"></span>
            }
        </div>
    </div>
}

@code {
    bool _noSequence;
    bool _noInfo;
    bool _noTitle;
    string[]? _algorithmFilter;
    float _width = 200;

    int[] _array = null!;
    Sort.State[] _sortStates = null!;
    Sequence.GenerationSettings _generationSettings = new()
    {
        Length = 100,
        Duplication = 0,
        Randomness = 1,
        IsDescending = false,
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ParseQuery(nav.Uri);
        Shuffle();
    }

    private void ParseQuery(string uri)
    {
        var a = uri.Split('?');
        if (a.Length <= 1) return;

        var q = a[1];
        var kvs = q.Split('&');

        foreach (var item in kvs)
        {
            var kv = item.Split('=');
            var key = kv[0];
            var value = kv.ElementAtOrDefault(1);

            if (key is "info" or "i")
            {
                if (value is "0" or "false") _noInfo = true;
            }
            else if (key is "sequence" or "seq" or "s")
            {
                if (value is "0" or "false") _noSequence = true;
            }
            else if (key is "title" or "t")
            {
                if (value is "0" or "false") _noTitle = true;
            }
            else if (key is "length" or "l")
            {
                if (uint.TryParse(value, out var v)) _generationSettings.Length = v;
            }
            else if (key is "algorithm" or "a")
            {
                _algorithmFilter = value?.Split('_');
            }
            else if (key is "width" or "w")
            {
                if (float.TryParse(value, out var v)) _width = v;
            }
        }
    }

    private void Shuffle()
    {
        ShuffleArray();
        ResetStates();
    }

    private void ShuffleArray() => _array = Sequence.Generate(_generationSettings);

    private void ResetStates() => _sortStates = Sort.Algorithms
        .Where(a => _algorithmFilter == null
            || _algorithmFilter.Any(f =>
                a.Name.StartsWith(f, StringComparison.OrdinalIgnoreCase)))
        .Select(a => Sort.Start(_array.ToArray(), a)).ToArray();

    async Task RunAsync()
    {
        ResetStates();

        bool moveNext()
        {
            var any = false;
            foreach (var s in _sortStates) any |= s.MoveNext();
            return any;
        }

        while (moveNext())
        {
            StateHasChanged();
            await Task.Delay(1);
        }
    }
}
