@page "/"
@inject NavigationManager nav

<style>
    div.algorithm {
        display: inline-block;
        border-style:solid;
        border-width:1px;
        border-color:lightblue;
        margin:1px;
        padding:1px;
    }

    div.name {
        font-size: large;
        font-weight: bold;
        text-align:center;
    }

    div.running {
        color: dodgerblue;
    }

    div.done {
        color: forestgreen;
    }

    span.bar {
        display: inline-block;
        width: 2px;
        background-color: lightgreen;
        margin: 0px;
        padding: 0px;
    }

    span.swap {
        background-color: red;
    }

    span.compare {
        background-color: green;
    }

    body {
        margin:0px;
        padding:0px;
    }

    div.footer {
        margin:0px;
        padding:0px;
        position: absolute;
        left: 0pt;
        right: 0pt;
        bottom: 0px;
        overflow:clip;
        background-color: lightsteelblue;
    }

    div.footer p {
        margin:0.5em;
        padding:0em;
    }
</style>

<div>
    長さ <input type="number" @bind-value="@_generationSettings.Length" min="1" max="300" />
    重複度 <input type="number" @bind-value="@_generationSettings.Duplication" min="0" step="1" />
    ランダム度 <input type="number" @bind-value="@_generationSettings.Randomness" min="0" max="5" step="0.1" />
    降順 <input type="checkbox" @bind-value="@_generationSettings.IsDescending" />

    <button @onclick="@Shuffle">Shuffle</button>
    <button @onclick="@RunAsync">Run</button>
</div>

@foreach (var state in _sortStates)
{
    var nc = state.Current.Kind == Sort.Kind.Done
        ? "name done"
        : "name running";

    <div class="algorithm" title="@state.Description">
        <div class="@nc">@state.Name</div>

        @for (int i = 0; i < state.Items.Length; i++)
        {
            var x = state.Items[i];
            var (kind, i1, i2) = state.Current;

            var c = "bar";
            if ((i == i1 || i == i2) && kind != Sort.Kind.Done)
                c = kind == Sort.Kind.Compare ? "bar compare" : "bar swap";

            <span class="@c" style="height:@(x)px;"></span>
        }
    </div>
}

@if (!_noFooter)
{
    <div class="footer">
        <p>
            ソースコードはこちら: <a href="https://github.com/ufcpp/StaticWebApps/tree/main/BlazorWasm/SortVisualizer">SortVisualizer</a>
        </p>
    </div>
}

@code {
    public bool _noFooter;

    int[] _array = null!;
    Sort.State[] _sortStates = null!;
    Sequence.GenerationSettings _generationSettings = new()
    {
        Length = 100,
        Duplication = 0,
        Randomness = 1,
        IsDescending = false,
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ParseQuery(nav.Uri);
        Shuffle();
    }

    private void ParseQuery(string uri)
    {
        var a = uri.Split('?');
        if (a.Length <= 1) return;

        var q = a[1];
        var kvs = q.Split('&');

        foreach (var item in kvs)
        {
            var kv = item.Split('=');
            var key = kv[0];
            var value = kv.ElementAtOrDefault(1);

            if (key == "footer")
            {
                if (value is "0" or "false") _noFooter = true;
            }
        }
    }

    private void Shuffle()
    {
        ShuffleArray();
        ResetStates();
    }

    private void ShuffleArray() => _array = Sequence.Generate(_generationSettings);

    private void ResetStates() => _sortStates = Sort.Algorithms.Select(a => Sort.Start(_array.ToArray(), a)).ToArray();

    async Task RunAsync()
    {
        ResetStates();

        bool moveNext()
        {
            var any = false;
            foreach (var s in _sortStates) any |= s.MoveNext();
            return any;
        }

        while (moveNext())
        {
            StateHasChanged();
            await Task.Delay(1);
        }
    }
}
