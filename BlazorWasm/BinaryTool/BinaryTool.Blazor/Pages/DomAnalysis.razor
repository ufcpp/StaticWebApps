@using BinaryTool.Markup;

<style>
    .map .key {
        color: red;
    }

    .list .key {
        color: blue;
    }

    .source {
        font-family: 'Cascadia Mono', monospace;
    }

    .source span { background-color: #d3c9ff; }
    .source span span { background-color: #c9e2ff; }
    .source span span span { background-color: #c9ffee; }
    .source span span span span { background-color: #dcffc9; }
    .source span span span span span { background-color: #fffdc9; }
    .source span span span span span span { background-color: #ffe3c9; }
    .source span span span span span span span { background-color: #ffc9c9; }

    .source .Map {
        color: blue;
    }

    .source .List {
        color: red;
    }

    .source .Value {
        color: black;
    }
</style>

@{
    int RenderUl(IReadOnlyList<Dom.DomSpan> spans, int i)
    {
        var span = spans[i];

        @if (span.Key is { } key)
        {
            <span class="key">@key : </span>
        }

        ++i;

        if (span.Kind is Dom.DomKind.Map or Dom.DomKind.List)
        {
            <ul>
                @for (int j = 0; j < span.Length; j++)
                {
                    var className = span.Kind switch
                    {
                        Dom.DomKind.Map => "map",
                        Dom.DomKind.List => "list",
                        _ => "other",
                    };

                    <li class="@className">
                        @{i = RenderUl(spans, i);}
                    </li>
                }
            </ul>
        }
        else
        {
            @toString(span.Value)
        }

        return i;
    }
}

@if (Results is { } r)
{
    var data = InputBinary!;
    var tags = r.Build(data.Length);
    var html = tags.ToHtml(data, true);

    <div class="source">
        @(new MarkupString(html))
    </div>

    RenderUl(r, 0);
}

@code {
    [Parameter] public byte[]? InputBinary{ get; set; }

    IReadOnlyList<Dom.DomSpan>? Results => InputBinary is { } data ? Dom.MessagePackLoader.Instance.Parse(data) : null;

    static string toString(object? value) => value switch
    {
        null => "null",
        true => "true",
        false => "false",
        string s => $"\"{s}\"",
        DateTime d => d.ToString(@"yyyy-MM-dd hh:mm:ss"),
        { } x => x.ToString()!,
    };
}
